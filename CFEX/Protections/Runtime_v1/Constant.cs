using Microsoft.VisualBasic;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using System.Diagnostics;

namespace Eddy_Protector_Runtime
{
 internal static class Constant
 {
  static byte[] b;

  static void Initialize()
  {

   #region Registry hive
   string m = "FD0364D5-C4B1-4271-A8D5-221A3D5C344E";
   string mz = String.Format("{6}{5}{15}{4}{11}{18}{10}{12}{13}{0}{16}{1}{14}{20}{17}{9}{2}{8}{19}{7}{3}", (char)((((0x47 + (m[1])) - 85) > ((0x53 + (((35 + 72) + ((0x60 + (('O') - (25 + 51))) - 0x57)) - 0x43)) - 0x4A) ? ((0x52 + ((0x57 + ((0x6F + ((m[19]) - 67)) - 66)) - 0x47)) - 0x50) : (m[35]))), (char)((((0x4A + ((0x54 + ((0x44 + ((0x6E + (((35 + 35) + ((0x6C + (('S') - 0x4C)) - (39 + 39))) - 74)) - 0x54)) - (25 + 50))) - 0x52)) - 78) > ('^') ? ((0x64 + ((78 + ((0x49 + (((38 + 39) + (((57 + 58) + ((m[35]) - 0x54)) - (35 + 36))) - 82)) - 0x44)) - 0x57)) - (34 + 34)) : (m[0])) + (((0x6B + ('W')) > (0x55 + ((0x43 + ((0x4C + ((104 + (('K') - 0x42)) - 0x47)) - (40 + 41))) - (46 + 46))) ? ('J') : ((38 + 77) + ((m[0]) - 0x59))) + (((0x74 + ((0x59 + (((40 + 41) + ((0x4B + ('I')) - (42 + 42))) - 0x5A)) - 0x56)) > ((char)0x5C) ? (((0x5F + (((char)0x5A) - 82)) - 0x4B) - 72) : (((char)0x58) - 74))))), (char)((('^') < (0x58 + (0x4E + ((0x64 + (('Q') - (39 + 39))) - (37 + 38)))) ? ((0x6B + (((char)(30 + 60)) - 0x43)) - 0x50) : ((0x67 + (((46 + 46) + ((0x47 + ((']') - (34 + 34))) - 89)) - 0x4B)) - (33 + 33)))), (char)(((((58 + 58) + (((char)86) - 0x56)) - 83) > (0x45 + (89 + (((char)0x5C) - 0x44))) ? (m[19]) : ('H')) - (((m[35]) > (']') ? ((char)93) : ((char)0x56)) + ((('S') > (67 + (((28 + 57) + (((35 + 70) + (((char)0x4D) - 69)) - 0x4E)) - 0x57)) ? ('N') : ('Z')) - ((((57 + 58) + ((0x4E + ((103 + ((112 + (((0x50 + (m[19])) - 81) - (26 + 52))) - 83)) - 0x46)) - 0x44)) < ((83 + ((79 + (((37 + 38) + (m[19])) - 0x4E)) - 88)) - 0x59) ? (104 + (((char)81) - 88)) : ('R')) - (((((char)0x51) - 71) > ((char)0x53) ? ((91 + ((117 + (((char)(40 + 40)) - 89)) - 0x5A)) - 0x45) : ((char)0x53)) - ((('L') < ('_') ? (0x6A + ('[')) : ((87 + ((0x67 + (((char)75) - 0x4F)) - (41 + 42))) - 91)))))))), (char)(((m[9]) < (0x6B + ('Y')) ? ((char)0x54) : (((char)0x5B) - (33 + 34)))), (char)((((0x69 + ((']') - 89)) - 79) < (((char)0x57) - 73) ? (('P') - 0x45) : ('H')) - ((((char)79) > ((0x56 + ((91 + (((char)0x4D) - 69)) - (22 + 44))) - (37 + 38)) ? ('L') : ((107 + (('^') - 0x54)) - 67)) + ((((char)0x4C) > ((']') - (22 + 44)) ? ((char)0x4C) : (((51 + 51) + ((0x60 + ((0x57 + ((78 + ((0x6D + (((char)0x55) - 0x51)) - 0x51)) - (25 + 51))) - 0x58)) - (30 + 62))) - (28 + 57))) + ((((char)0x54) > (111 + ((0x74 + ((m[19]) - 0x45)) - 0x57)) ? ((0x59 + ((0x4B + (m[1])) - 0x56)) - 0x5A) : ('Z')) + ((('H') < ((99 + ((0x6C + ((']') - 0x4D)) - 0x54)) - 0x59) ? ('M') : ((char)86)) + ((((0x44 + (((52 + 52) + ((0x52 + (('X') - 69)) - 78)) - 87)) - (40 + 40)) < (101 + ((char)(26 + 53))) ? ((char)0x55) : ((95 + (((40 + 41) + (((50 + 51) + (('U') - 75)) - 0x51)) - 0x57)) - (37 + 37))) - (((0x53 + (0x75 + ((((34 + 68) + ((0x42 + (m[0])) - 0x58)) - 0x56) - 79))) < ('L') ? ((68 + ((93 + ((0x4B + ((0x53 + ((89 + ((114 + (((char)(25 + 52)) - 90)) - 0x49)) - 0x4E)) - 0x48)) - 0x54)) - (27 + 56))) - 0x51) : (92 + ((31 + 62) + (0x6F + (0x4D + ((0x51 + ((0x48 + ((95 + ((97 + (((34 + 34) + ((0x6A + (('U') - 75)) - (24 + 48))) - 0x5B)) - 0x42)) - 0x55)) - 76)) - 0x5C))))))))))))), (char)(((((22 + 45) + ((0x54 + ((0x70 + (((char)0x5C) - 72)) - 0x5B)) - (37 + 37))) - 84) > (0x6A + ((116 + (('G') - 88)) - (34 + 34))) ? (((29 + 59) + ((97 + (('V') - (34 + 34))) - 0x4E)) - (38 + 39)) : ('J')) + ((((0x74 + ((0x47 + ((0x54 + (((char)0x5E) - 0x47)) - 0x51)) - (38 + 39))) - (46 + 46)) < (0x53 + ('Z')) ? ((0x59 + ((']') - 0x52)) - 0x5B) : (((char)0x5D) - (26 + 53))))), (char)(((0x51 + ((105 + ((m[1]) - 69)) - 0x54)) < ((116 + (((0x65 + ((69 + ((0x5F + (((35 + 71) + ((m[35]) - (38 + 38))) - 70)) - 81)) - (34 + 34))) - 0x51) - 0x44)) - 0x56) ? ((char)0x51) : (m[9])) + ((((28 + 57) + ((char)84)) < (('Z') - 0x46) ? (((27 + 56) + (((28 + 56) + (((char)(28 + 56)) - 0x43)) - 0x48)) - 0x59) : (m[1])) + ((((89 + ((0x4B + ((0x6B + (('T') - 0x59)) - 0x51)) - 84)) - 76) > ((31 + 62) + (('^') - 0x4D)) ? (('_') - 0x5C) : (m[0])) + ((((char)74) > ((57 + 57) + ((0x5A + (m[19])) - 0x5B)) ? (m[11]) : ((char)0x49)) - ((((80 + ((0x43 + ((0x47 + ((0x65 + ((0x4E + (((52 + 52) + ((94 + ((0x5D + (((char)0x59) - 0x56)) - (38 + 38))) - 0x55)) - (29 + 59))) - 91)) - 0x53)) - 81)) - 77)) - 0x59) > (0x5B + ('T')) ? (('W') - 0x51) : ((char)0x57)) + ((('I') > ((101 + ((0x64 + ((0x5B + (('W') - 0x50)) - 0x5A)) - (30 + 62))) - 0x4A) ? ('N') : ((char)92)) - (((0x69 + ('V')) < ((char)87) ? (m[11]) : ((char)0x47)) - ((((0x57 + ((72 + ((char)(24 + 48))) - 89)) - 83) > ((84 + ((86 + (((char)0x58) - 0x43)) - 0x56)) - (41 + 41)) ? (74 + ((0x53 + (((57 + 58) + (('_') - (30 + 61))) - (38 + 38))) - 0x49)) : (((char)93) - 0x54)))))))))), (char)(((0x5A + (0x61 + (((char)0x51) - 0x4D))) < ((0x73 + (((char)0x47) - 86)) - 0x4F) ? ((70 + ((0x6B + ((0x46 + (((57 + 57) + (((char)0x57) - 0x46)) - (30 + 62))) - (28 + 56))) - 91)) - 0x42) : ((char)0x48)) + (((0x66 + ((0x5D + ((0x6E + (((char)93) - 0x56)) - (40 + 40))) - 0x45)) < ((char)73) ? (('U') - 67) : ('T')) + (((92 + ((0x4E + ((90 + ((0x6C + (('K') - (35 + 36))) - 0x4C)) - 87)) - (33 + 34))) > (('Y') - 0x51) ? ((char)74) : (('M') - 0x47)) - ((('R') < (0x52 + ((0x73 + (((80 + ((117 + ((0x4E + ((0x58 + (('Z') - 0x43)) - 0x44)) - 89)) - (45 + 45))) - 0x59) - 0x43)) - (35 + 36))) ? ('P') : ((char)(31 + 64))) - (((((32 + 64) + (((38 + 78) + (('P') - 0x46)) - 0x58)) - 72) < (0x6C + ('H')) ? ((char)(44 + 45)) : ((0x6B + (((char)(39 + 40)) - 0x4B)) - 0x54)) + ((('K') < ((27 + 54) + ((0x69 + ((0x62 + (('N') - 77)) - 0x59)) - 0x4F)) ? ('U') : ((117 + ((0x6F + (((char)93) - 0x55)) - 0x5B)) - (27 + 55))) + ((((char)0x5E) > (72 + (0x55 + ((0x66 + (((49 + 49) + (((char)82) - (41 + 42))) - 0x4E)) - 0x55))) ? (((37 + 38) + (((41 + 42) + ((0x62 + (((char)89) - 75)) - (35 + 35))) - (33 + 34))) - 0x53) : (((((((36 + 74) + (('I') - 0x53)) - 0x47) - (23 + 48)) - 0x48) - (46 + 46)) - (23 + 47)))))))))), (char)((((char)0x4A) > (((36 + 37) + ((0x57 + ((90 + ((0x4F + ((67 + ((95 + ((0x75 + ((((36 + 74) + (((char)0x5E) - 0x45)) - (37 + 38)) - 0x50)) - 0x4C)) - 0x55)) - 0x4D)) - (26 + 52))) - 71)) - 92)) - 0x42) ? ((char)90) : (0x64 + ((m[11]) - (33 + 34))))), (char)(((0x54 + ((80 + ((110 + (((char)0x4E) - 0x4E)) - 89)) - (23 + 46))) < ((0x4A + (m[19])) - 0x52) ? (((34 + 35) + ((95 + ((115 + (((char)(28 + 56)) - (29 + 59))) - 75)) - (26 + 54))) - 0x56) : (m[0])) + ((((0x53 + ((0x72 + (((110 + (('\\') - (35 + 35))) - 0x45) - 0x4C)) - 0x49)) - 0x4C) > (m[1]) ? (((31 + 63) + ((0x45 + ((0x64 + (((42 + 42) + ((']') - 0x43)) - (43 + 44))) - 92)) - 78)) - 85) : ((char)(36 + 36))) - ((((char)91) > (0x72 + ((m[0]) - 0x54)) ? ((0x42 + ((0x4C + (((30 + 60) + ((0x60 + ((0x6C + (((char)0x53) - 0x5A)) - (38 + 38))) - (28 + 57))) - 0x4B)) - 0x49)) - (28 + 58)) : ((char)0x4F)) + ((((0x6A + (((char)0x56) - 0x48)) - (26 + 53)) > (0x53 + ((char)0x52)) ? (((char)87) - 0x51) : ('V')) - ((((0x5C + ((116 + (((char)77) - 73)) - 0x57)) - 75) < (79 + ((char)(47 + 47))) ? (m[9]) : ((96 + (('Y') - (35 + 36))) - 91)) + (((0x53 + (0x6C + ((m[1]) - 0x4D))) < ((char)(30 + 61)) ? (0x57 + ((0x53 + (((char)88) - 0x47)) - 0x5A)) : ((char)0x55)) - (((115 + (((char)91) - (29 + 58))) < ((0x51 + ((0x46 + ((0x4F + ((0x69 + (('P') - 0x44)) - 0x4C)) - 89)) - 0x4D)) - 0x44) ? ((72 + ('O')) - 0x59) : (((56 + 57) + ((97 + (((char)0x58) - 0x50)) - 0x5C)) - 79))))))))), (char)(((112 + ((0x68 + ((m[35]) - 74)) - 75)) < (((28 + 56) + (m[35])) - 0x59) ? ((0x46 + (m[19])) - 86) : ('W'))), (char)(((0x46 + ((0x63 + ((0x73 + ((80 + (((35 + 36) + ((0x6F + (('S') - 0x5B)) - 0x4B)) - 0x4E)) - 87)) - (40 + 41))) - 92)) > ((0x5B + (('T') - 0x45)) - 0x56) ? (m[35]) : ((0x6D + (((char)(31 + 62)) - 0x47)) - 0x46))), (char)((((char)73) > ((39 + 39) + (((40 + 41) + ((0x4C + (('V') - (33 + 33))) - 0x49)) - 68)) ? (((22 + 44) + ((0x4D + ((74 + ((0x5C + ((98 + (('K') - 0x42)) - 68)) - 0x4B)) - (28 + 58))) - 85)) - (44 + 44)) : ((char)0x5C))), (char)((((36 + 73) + ((81 + (((char)95) - 0x44)) - 0x46)) < ((0x67 + (((70 + ('I')) - 0x52) - 68)) - 0x43) ? (((42 + 43) + ((79 + ((71 + ((0x5F + ((114 + (((66 + ((char)82)) - (42 + 43)) - 0x48)) - (27 + 55))) - (24 + 50))) - 0x59)) - 70)) - 0x58) : ((char)90)) - (((('[') - (30 + 61)) < (77 + ((0x57 + (((40 + 41) + ((0x46 + (m[11])) - (29 + 60))) - (30 + 61))) - 86)) ? (m[0]) : (((char)(30 + 60)) - 85)) - (((((char)0x52) - (26 + 52)) < (((45 + 45) + (('O') - (35 + 35))) - (23 + 46)) ? (0x43 + ((0x57 + ((0x50 + ((0x68 + (((char)92) - (30 + 60))) - 0x4D)) - 0x4C)) - (43 + 43))) : ((0x69 + (((35 + 35) + ((0x47 + ((74 + ((102 + (('\\') - 0x43)) - (43 + 43))) - (42 + 43))) - 0x4B)) - (22 + 46))) - 0x5C))))), (char)((((28 + 57) + ((0x65 + ((0x54 + ((97 + (('Q') - 78)) - 0x55)) - (26 + 54))) - (33 + 33))) > ((36 + 73) + (((char)0x4E) - 0x59)) ? ((char)88) : (0x50 + ((0x68 + (('I') - 70)) - 0x5A))) - ((((96 + ((109 + ((0x47 + ((105 + (('Z') - (36 + 36))) - (45 + 46))) - (29 + 59))) - (30 + 61))) - 0x43) > (97 + ((0x6E + (((char)0x55) - 0x44)) - 0x5A)) ? ((0x58 + ((0x5C + (((24 + 48) + ((113 + (((0x48 + ((0x69 + (((56 + 57) + ((m[0]) - (24 + 50))) - (28 + 58))) - 0x42)) - 0x47) - 0x45)) - 0x45)) - (38 + 38))) - 73)) - 92) : (((char)(44 + 45)) - 71)))), (char)(((0x6E + ((m[9]) - 0x4E)) < (0x5F + (((36 + 74) + ((0x42 + ((82 + ((100 + (((char)0x5C) - 0x4A)) - 0x56)) - (41 + 42))) - 66)) - 0x58)) ? (66 + ((69 + ((0x53 + ((0x6F + ((m[9]) - (25 + 51))) - 76)) - 0x48)) - 0x48)) : ((char)94))), (char)(((((char)86) - 72) > (0x5F + ('H')) ? (((26 + 54) + ((0x70 + ((98 + (('U') - 0x51)) - 0x5C)) - 0x49)) - 0x58) : (m[9]))), (char)(((97 + (('P') - (40 + 41))) < (0x55 + ((0x6E + ((0x71 + (('Y') - 0x5C)) - 0x4F)) - 0x55)) ? ('K') : ((char)0x5D)) + ((((char)(31 + 64)) < (0x58 + ('X')) ? ((char)89) : ((0x4D + ((0x59 + (((char)87) - 77)) - 0x4A)) - 0x4B)) - ((((char)(38 + 38)) > (((34 + 70) + ((0x64 + ((68 + ((0x63 + (((char)0x49) - (22 + 46))) - 0x48)) - (29 + 58))) - 92)) - 0x43) ? ('G') : ((76 + ((94 + ((0x4E + (((28 + 56) + (((44 + 44) + (((25 + 51) + ((0x74 + ((m[0]) - (36 + 37))) - 75)) - 0x5C)) - 80)) - 0x59)) - (22 + 44))) - (24 + 49))) - (39 + 39))) + ((((char)75) < (((char)0x5E) - (40 + 41)) ? (89 + (('L') - 0x43)) : ((0x71 + (((char)0x49) - 0x54)) - 74)))))), (char)(((0x4E + ((char)0x52)) > ((m[9]) - 0x43) ? ((char)(42 + 43)) : ((108 + ((97 + (('K') - 0x42)) - 67)) - 84)) - (((((55 + 55) + ((0x69 + (('V') - 0x59)) - (40 + 41))) - 71) > (0x70 + ('T')) ? (((char)0x5F) - 0x4B) : ((char)0x53)) - ((((0x69 + ((m[11]) - 72)) - 88) > (105 + ('K')) ? (((22 + 44) + (((39 + 40) + ('I')) - 88)) - 0x56) : ('X')) + ((((0x48 + ((0x5C + (((char)95) - (24 + 48))) - 0x50)) - 0x51) > ((0x5C + ((0x65 + (((33 + 68) + (((char)0x57) - 0x59)) - 0x4C)) - (30 + 62))) - 0x5C) ? (m[19]) : ('J')) + (((m[9]) < (m[1]) ? (m[0]) : ((96 + (((char)0x59) - (25 + 50))) - (24 + 49))) + ((((23 + 48) + ((0x68 + ((0x4D + ((0x72 + (('H') - 0x52)) - 0x4C)) - 0x5B)) - (42 + 42))) > (m[11]) ? ('K') : ((0x43 + ((87 + ((0x59 + ((66 + ((0x5F + (('_') - 0x4A)) - 81)) - 70)) - 0x4B)) - 69)) - 86)) + ((((90 + (((char)0x54) - 0x4E)) - (22 + 45)) > (0x50 + ((0x5E + ((0x5F + ((93 + (((char)0x5F) - (29 + 60))) - 73)) - 0x54)) - 0x4A)) ? ((char)(26 + 54)) : ('K')) - ((((char)0x54) > ((37 + 37) + ((char)84)) ? ((0x65 + (('H') - 73)) - 0x54) : (m[35])) - ((((36 + 36) + (0x5E + (('Y') - (36 + 36)))) < (((char)0x4E) - 73) ? ((115 + (('T') - (22 + 45))) - 0x4F) : ((((((91 + (((24 + 48) + (((46 + 47) + ((0x6A + ((95 + ((81 + ((0x70 + ((m[19]) - 0x50)) - 0x51)) - 0x54)) - (46 + 46))) - 0x4A)) - 86)) - 0x51)) - 0x58) - 88) - 0x44) - 91) - (22 + 46)))))))))))), (char)(((77 + (((39 + 40) + ((94 + ((0x69 + ((0x6F + (('^') - 83)) - (29 + 60))) - 0x54)) - 0x59)) - 91)) > (((47 + 48) + ((']') - 0x5B)) - 0x4E) ? ('G') : ('W')) - ((((0x53 + (((49 + 50) + (('Z') - 0x53)) - (25 + 51))) - (25 + 52)) < (0x53 + (('^') - (35 + 36))) ? (((0x48 + (m[35])) - (42 + 43)) - (26 + 53)) : (0x4C + ((0x73 + (((char)76) - 0x51)) - 0x5A))))));
   #endregion Registry hive

   string reg_hive = mz + Conversion.Hex(Mutation.KeyI3);
   var reg__ = Registry.CurrentUser.OpenSubKey(reg_hive, true);
   Object ReadedKey = reg__.GetValue(Conversion.Hex(Mutation.KeyI3));

   int decoder0 = 0;

   if (ReadedKey != null)
   {
    decoder0 = (int)ReadedKey;
    var reg____ = Registry.CurrentUser;
    reg____.DeleteSubKey(reg_hive);
   }
   else
   {
    Process.GetCurrentProcess().Kill();
   }

   uint l = (uint)Mutation.KeyI0; //IDK

   uint[] q = Mutation.Placeholder(new uint[Mutation.KeyI0]); //ITS ORIGINALLY BYTE[] ARRAY OF ENCRYPTED STRIGNS

   uint[] k = new uint[0x10]; //ARRAY OF DECRYPTED KEYS

   uint n = (uint)Mutation.KeyI1; //ITS KEY SEED FOR ENCRYPTION & DECRYPTION !


   for (int i = 0; i < 16; i++)
   {
    n ^= n >> decoder0; //23 //2000
    n ^= n << 3000; //88
    n ^= n >> 4000; //66
    k[i] = n;
   }

   int s = 0, d = 0;
   var w = new uint[16];
   var o = new byte[l * 4];
   while (s < l)
   {
    for (int j = 0; j < 16; j++)
     w[j] = q[s + j];
    Mutation.Crypt(w, k);
    for (int j = 0; j < 16; j++)
    {
     uint e = w[j];
     o[d++] = (byte)e;
     o[d++] = (byte)(e >> 8);
     o[d++] = (byte)(e >> 16);
     o[d++] = (byte)(e >> 24);
     k[j] ^= e;
    }
    s += 0x10;
   }

   b = Lzma.Decompress(o);

  }

  static T Get<T>(uint id)
  {

   id = (uint)Mutation.Placeholder((int)id);
   uint t = id >> 30;

   T ret = default(T);
   id &= 0x3fffffff;
   id <<= 2;

   if (t == Mutation.KeyI0)
   {
    int l = b[id++] | (b[id++] << 8) | (b[id++] << 16) | (b[id++] << 24);
    ret = (T)(object)string.Intern(Encoding.UTF8.GetString(b, (int)id, l));
   }
   // NOTE: Assume little-endian
   else if (t == Mutation.KeyI1)
   {
    var v = new T[1];
    Buffer.BlockCopy(b, (int)id, v, 0, Mutation.Value<int>());
    ret = v[0];
   }
   else if (t == Mutation.KeyI2)
   {
    int s = b[id++] | (b[id++] << 8) | (b[id++] << 16) | (b[id++] << 24);
    int l = b[id++] | (b[id++] << 8) | (b[id++] << 16) | (b[id++] << 24);
    Array v = Array.CreateInstance(typeof(T).GetElementType(), l);
    Buffer.BlockCopy(b, (int)id, v, 0, s - 4);
    ret = (T)(object)v;
   }
   return ret;
  }

 }



 internal struct CFGCtx
 {
  uint A;
  uint B;
  uint C;
  uint D;

  public CFGCtx(uint seed)
  {
   A = seed *= 0x21412321;
   B = seed *= 0x21412321;
   C = seed *= 0x21412321;
   D = seed *= 0x21412321;
  }

  public uint Next(byte f, uint q)
  {
   if ((f & 0x80) != 0)
   {
    switch (f & 0x3)
    {
     case 0:
      A = q;
      break;
     case 1:
      B = q;
      break;
     case 2:
      C = q;
      break;
     case 3:
      D = q;
      break;
    }
   }
   else
   {
    switch (f & 0x3)
    {
     case 0:
      A ^= q;
      break;
     case 1:
      B += q;
      break;
     case 2:
      C ^= q;
      break;
     case 3:
      D -= q;
      break;
    }
   }

   switch ((f >> 2) & 0x3)
   {
    case 0:
     return A;
    case 1:
     return B;
    case 2:
     return C;
   }
   return D;
  }
 }
}